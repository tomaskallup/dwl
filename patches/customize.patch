diff --git a/config.def.h b/config.def.h
index 8dc6502..a8c05f5 100644
--- a/config.def.h
+++ b/config.def.h
@@ -1,3 +1,7 @@
+#include <libinput.h>
+#include <wlr/util/log.h>
+#include <wlr/types/wlr_output_management_v1.h>
+
 /* Taken from https://github.com/djpohly/dwl/issues/466 */
 #define COLOR(hex)    { ((hex >> 24) & 0xFF) / 255.0f, \
                         ((hex >> 16) & 0xFF) / 255.0f, \
@@ -22,7 +26,9 @@ static int log_level = WLR_ERROR;
 
 /* Autostart */
 static const char *const autostart[] = {
-        "wbg", "/path/to/your/image", NULL,
+        "dbus-sway-environment", NULL,
+        "configure-gtk", NULL,
+        "/home/armeeh/Pkg/dwl/scripts/dwl-post-start.sh", NULL,
         NULL /* terminate */
 };
 
@@ -31,16 +37,15 @@ static const char *const autostart[] = {
 static const Rule rules[] = {
 	/* app_id             title       tags mask     isfloating   monitor */
 	/* examples: */
-	{ "Gimp_EXAMPLE",     NULL,       0,            1,           -1 }, /* Start on currently visible tags floating, not tiled */
-	{ "firefox_EXAMPLE",  NULL,       1 << 8,       0,           -1 }, /* Start on ONLY tag "9" */
+	{ "Slack",          NULL,       1 << 8,     0,           -1 },
 };
 
 /* layout(s) */
 static const Layout layouts[] = {
 	/* symbol     arrange function */
 	{ "[]=",      tile },
-	{ "><>",      NULL },    /* no layout function means floating behavior */
-	{ "[M]",      monocle },
+	// { "><>",      NULL },    /* no layout function means floating behavior */
+	// { "[M]",      monocle },
 };
 
 /* monitors */
@@ -64,7 +69,7 @@ static const struct xkb_rule_names xkb_rules = {
 	/* example:
 	.options = "ctrl:nocaps",
 	*/
-	.options = NULL,
+	.options = "compose:ralt",
 };
 
 static const int repeat_rate = 25;
@@ -91,7 +96,7 @@ LIBINPUT_CONFIG_CLICK_METHOD_NONE
 LIBINPUT_CONFIG_CLICK_METHOD_BUTTON_AREAS
 LIBINPUT_CONFIG_CLICK_METHOD_CLICKFINGER
 */
-static const enum libinput_config_click_method click_method = LIBINPUT_CONFIG_CLICK_METHOD_BUTTON_AREAS;
+static const enum libinput_config_click_method click_method = LIBINPUT_CONFIG_CLICK_METHOD_CLICKFINGER;
 
 /* You can choose between:
 LIBINPUT_CONFIG_SEND_EVENTS_ENABLED
@@ -114,7 +119,7 @@ LIBINPUT_CONFIG_TAP_MAP_LMR -- 1/2/3 finger tap maps to left/middle/right
 static const enum libinput_config_tap_button_map button_map = LIBINPUT_CONFIG_TAP_MAP_LRM;
 
 /* If you want to use the windows key for MODKEY, use WLR_MODIFIER_LOGO */
-#define MODKEY WLR_MODIFIER_ALT
+#define MODKEY WLR_MODIFIER_LOGO
 
 #define TAGKEYS(KEY,SKEY,TAG) \
 	{ MODKEY,                    KEY,            view,            {.ui = 1 << TAG} }, \
@@ -126,8 +131,24 @@ static const enum libinput_config_tap_button_map button_map = LIBINPUT_CONFIG_TA
 #define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }
 
 /* commands */
-static const char *termcmd[] = { "foot", NULL };
-static const char *menucmd[] = { "wmenu-run", NULL };
+static const char *termcmd[] = { "alacritty", NULL };
+static const char *menucmd[] = { "bemenu-run", NULL };
+
+/* Media keys */
+static const char *upvol[]      = { "wpctl",   "set-volume", "@DEFAULT_AUDIO_SINK@",      "5%+",      NULL };
+static const char *downvol[]    = { "wpctl",   "set-volume", "@DEFAULT_AUDIO_SINK@",      "5%-",      NULL };
+static const char *mutevol[]    = { "wpctl",   "set-mute",   "@DEFAULT_AUDIO_SINK@",      "toggle",   NULL };
+static const char *brightup[]   = { "light",   "-A",         "10",   NULL };
+static const char *brightdown[] = { "light",   "-U",         "10",   NULL };
+static const char *playpause[] =  { "playerctl", "play-pause",       NULL };
+static const char *playnext[] =  { "playerctl", "next",              NULL };
+static const char *playprev[] =  { "playerctl", "previous",          NULL };
+
+/* Other stuff */
+static const char *fnottdismissall[] = { "fnottctl", "dismiss", "all", NULL };
+static const char *lockcmd[] = { "lock.sh", NULL };
+static const char *screenshot[] = { "screenshot.sh" };
+static const char *screenshotselect[] = { "screenshot.sh", "select" };
 
 static const Key keys[] = {
 	/* Note that Shift changes certain key codes: c -> C, 2 -> at, etc. */
@@ -136,17 +157,17 @@ static const Key keys[] = {
 	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_Return,     spawn,          {.v = termcmd} },
 	{ MODKEY,                    XKB_KEY_j,          focusstack,     {.i = +1} },
 	{ MODKEY,                    XKB_KEY_k,          focusstack,     {.i = -1} },
-	{ MODKEY,                    XKB_KEY_i,          incnmaster,     {.i = +1} },
-	{ MODKEY,                    XKB_KEY_d,          incnmaster,     {.i = -1} },
+	{ MODKEY|WLR_MODIFIER_CTRL,  XKB_KEY_i,          incnmaster,     {.i = +1} },
+	{ MODKEY|WLR_MODIFIER_CTRL,  XKB_KEY_d,          incnmaster,     {.i = -1} },
 	{ MODKEY,                    XKB_KEY_h,          setmfact,       {.f = -0.05f} },
 	{ MODKEY,                    XKB_KEY_l,          setmfact,       {.f = +0.05f} },
 	{ MODKEY,                    XKB_KEY_Return,     zoom,           {0} },
 	{ MODKEY,                    XKB_KEY_Tab,        view,           {0} },
 	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_C,          killclient,     {0} },
-	{ MODKEY,                    XKB_KEY_t,          setlayout,      {.v = &layouts[0]} },
-	{ MODKEY,                    XKB_KEY_f,          setlayout,      {.v = &layouts[1]} },
-	{ MODKEY,                    XKB_KEY_m,          setlayout,      {.v = &layouts[2]} },
-	{ MODKEY,                    XKB_KEY_space,      setlayout,      {0} },
+	// { MODKEY,                    XKB_KEY_t,          setlayout,      {.v = &layouts[0]} },
+	// { MODKEY,                    XKB_KEY_f,          setlayout,      {.v = &layouts[1]} },
+	// { MODKEY,                    XKB_KEY_m,          setlayout,      {.v = &layouts[2]} },
+	// { MODKEY,                    XKB_KEY_space,      setlayout,      {0} },
 	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_space,      togglefloating, {0} },
 	{ MODKEY,                    XKB_KEY_e,         togglefullscreen, {0} },
 	{ MODKEY,                    XKB_KEY_0,          view,           {.ui = ~0} },
@@ -155,6 +176,21 @@ static const Key keys[] = {
 	{ MODKEY,                    XKB_KEY_period,     focusmon,       {.i = WLR_DIRECTION_RIGHT} },
 	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_less,       tagmon,         {.i = WLR_DIRECTION_LEFT} },
 	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_greater,    tagmon,         {.i = WLR_DIRECTION_RIGHT} },
+  
+	{ MODKEY|WLR_MODIFIER_SHIFT,            XKB_KEY_L,          spawn,         {.v = lockcmd } },
+  { WLR_MODIFIER_CTRL|WLR_MODIFIER_SHIFT, XKB_KEY_space,      spawn,         {.v = fnottdismissall } },
+
+	{ 0,                         XKB_KEY_XF86AudioNext,         spawn, {.v = playnext } },
+	{ 0,                         XKB_KEY_XF86AudioPrev,         spawn, {.v = playprev } },
+	{ 0,                         XKB_KEY_XF86AudioPlay,         spawn, {.v = playpause } },
+  { 0,                         XKB_KEY_XF86AudioLowerVolume,  spawn, {.v = downvol } },
+	{ 0,                         XKB_KEY_XF86AudioMute,         spawn, {.v = mutevol } },
+	{ 0,                         XKB_KEY_XF86AudioRaiseVolume,  spawn, {.v = upvol   } },
+  { 0,				                 XKB_KEY_XF86MonBrightnessUp,	  spawn, {.v = brightup} },
+	{ 0,				                 XKB_KEY_XF86MonBrightnessDown, spawn, {.v = brightdown} },
+	{ MODKEY,		                 XKB_KEY_Print,                 spawn, {.v = screenshot} },
+	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_Print,                 spawn, {.v = screenshotselect} },
+
 	TAGKEYS(          XKB_KEY_1, XKB_KEY_exclam,                     0),
 	TAGKEYS(          XKB_KEY_2, XKB_KEY_at,                         1),
 	TAGKEYS(          XKB_KEY_3, XKB_KEY_numbersign,                 2),
